{"$message_type":"diagnostic","message":"unused import: `BinaryHeap`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":29,"byte_end":39,"line_start":2,"line_end":2,"column_start":19,"column_end":29,"is_primary":true,"text":[{"text":"    collections::{BinaryHeap, HashMap},","highlight_start":19,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":29,"byte_end":41,"line_start":2,"line_end":2,"column_start":19,"column_end":31,"is_primary":true,"text":[{"text":"    collections::{BinaryHeap, HashMap},","highlight_start":19,"highlight_end":31}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/lib.rs","byte_start":28,"byte_end":29,"line_start":2,"line_end":2,"column_start":18,"column_end":19,"is_primary":true,"text":[{"text":"    collections::{BinaryHeap, HashMap},","highlight_start":18,"highlight_end":19}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/lib.rs","byte_start":48,"byte_end":49,"line_start":2,"line_end":2,"column_start":38,"column_end":39,"is_primary":true,"text":[{"text":"    collections::{BinaryHeap, HashMap},","highlight_start":38,"highlight_end":39}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `BinaryHeap`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:2:19\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    collections::{BinaryHeap, HashMap},\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"bounds on generic parameters in type aliases are not enforced","code":{"code":"type_alias_bounds","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":739,"byte_end":748,"line_start":27,"line_end":27,"column_start":19,"column_end":28,"is_primary":true,"text":[{"text":"pub type Cache<E: Evaluator> = HashMap<<E as Evaluator>::State, Possibility<E>>;","highlight_start":19,"highlight_end":28}],"label":"will not be checked at usage sites of the type alias","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is a known limitation of the type checker that may be lifted in a future edition.\nsee issue #112792 <https://github.com/rust-lang/rust/issues/112792> for more information","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"add `#![feature(lazy_type_alias)]` to the crate attributes to enable the desired semantics","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(type_alias_bounds)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this bound","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":737,"byte_end":748,"line_start":27,"line_end":27,"column_start":17,"column_end":28,"is_primary":true,"text":[{"text":"pub type Cache<E: Evaluator> = HashMap<<E as Evaluator>::State, Possibility<E>>;","highlight_start":17,"highlight_end":28}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: bounds on generic parameters in type aliases are not enforced\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:27:19\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub type Cache<E: Evaluator> = HashMap<<E as Evaluator>::State, Possibility<E>>;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mwill not be checked at usage sites of the type alias\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this bound\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this is a known limitation of the type checker that may be lifted in a future edition.\u001b[0m\n\u001b[0m           see issue #112792 <https://github.com/rust-lang/rust/issues/112792> for more information\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: add `#![feature(lazy_type_alias)]` to the crate attributes to enable the desired semantics\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(type_alias_bounds)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"2 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 2 warnings emitted\u001b[0m\n\n"}
